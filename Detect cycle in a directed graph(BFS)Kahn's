https://practice.geeksforgeeks.org/problems/detect-cycle-in-a-directed-graph/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=detect-cycle-in-a-directed-graph

public:
   // USING KAHN'S ALGO (BFS)
   //if toposort size<n => cycle present
    bool isCyclic(int n, vector<int> adj[]) {
        int indegree[n]={0};
        queue<int>q;
        //get values in indegree
        for(int i=0;i<n;i++){ //for every vertex
            for(auto it:adj[i]){ //traverse neighbours
                indegree[it]++;
            }
        }
        //add elements with indegree=0 to queue
        for(int i=0;i<n;i++){
            if(indegree[i]==0)q.push(i);
        }
        vector<int>topo;
        while(!q.empty()){
            int node=q.front();
            q.pop();
            topo.push_back(node);
            //neighbours
            for(auto it:adj[node]){
                indegree[it]--;
                if(indegree[it]==0)q.push(it);
            }
        }
        if(topo.size()==n)return false;
        else return true;
    }

https://practice.geeksforgeeks.org/problems/alien-dictionary/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=alien-dictionary

private:
    vector<int>toposort(int n,vector<int>adj[]){
        
        //getting indegree vector
        int indegree[n]={0};
        for(int i=0;i<n;i++){
            //traversing neighbours
            for(auto it:adj[i]){
                indegree[it]++;
            }
        }
        
        queue<int>q;
        //add elem with indegree 0 in queue
        for(int i=0;i<n;i++){
            if(indegree[i]==0){
                q.push(i);
            }
        }
        vector<int>topo;
        while(!q.empty()){
            int node=q.front();
            q.pop();
            topo.push_back(node);
            
            //traversing neighbours
            //decreasing indegree
            for(auto it:adj[node]){
                indegree[it]--;
                if(indegree[it]==0){
                    q.push(it);
                }
            }
        }
        return topo;
    }
    public:
    string findOrder(string dict[], int n, int k) {
        //USING TOPOLOGICAL SORT
        //k nodes
        //compare why 2 consecutive strings differ(pairs), take thm as edges
        //form a directed graph
        //perform topological sort
        
        vector<int>adj[k];
        for(int i=0;i<n-1;i++){
            string s1= dict[i];
            string s2= dict[i+1];
            int len=min(s1.size(),s2.size());
            //comparing 2 strings
            for( int i=0;i<len;i++ ){
                if(s1[i]!=s2[i]){
                    char from=s1[i];
                    char to = s2[i];
                    adj[from-'a'].push_back(to-'a');
                    break;
                }
            }
        }//created adjacency list got graph (directed)
        
        //topological sort
       vector<int>topo=toposort(k,adj);
       string ans="";
       for(auto it: topo){
           ans.push_back(char(it+'a'));
       }
       return ans;
        
    }

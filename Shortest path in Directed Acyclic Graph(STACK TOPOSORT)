https://practice.geeksforgeeks.org/problems/shortest-path-in-undirected-graph/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=direct-acyclic-graph

private: //dfs fn
     void toposort(int node,vector<pair<int,int>>adj[],int vis[],stack<int> &st){
         vis[node]=1;
         
         //neighbours
         for(auto it:adj[node]){
             int v=it.first;
             if(!vis[v]){
                 toposort(v,adj,vis,st);
             }
         }
         
         //those ho complete dfs push them in stack
         st.push(node);
     }
  public:
     vector<int> shortestPath(int n,int m, vector<vector<int>>& edges){
        //storing adjacency list
        vector<pair<int,int>>adj[n];
        for(int i=0;i<m;i++){
           int u=edges[i][0];
           int v=edges[i][1];
           int wt=edges[i][2];
           adj[u].push_back({v,wt});
        }
        //now first find toposort using dfs (stack)
        //relax edges
        int vis[n]={0};
        stack<int>st;
        //1... finding toposort
        for(int i=0;i<n;i++){
           if(!vis[i]){
               toposort(i,adj,vis,st);
           }
        }
        //2... relaxation of distances
        vector<int>dist(n,1e9); //initially infinity
        int src=0;
        dist[src]=0;
        while(!st.empty()){
            int node=st.top();
            st.pop();
            //neighbours
            for(auto it:adj[node]){
                int v=it.first;
                int wt=it.second;
                if(dist[node]+wt<dist[v]){
                    dist[v]=dist[node]+wt;
                }
            }
        }
        for(int i=0;i<n;i++){
            if(dist[i]==1e9)dist[i]=-1;
        }
        
        return dist;
    }
